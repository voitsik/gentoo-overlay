diff '--color=auto' -ur pyNFFT-1.3.2.orig/pynfft/tests/test_nfft.py pyNFFT-1.3.2/pynfft/tests/test_nfft.py
--- pyNFFT-1.3.2.orig/pynfft/tests/test_nfft.py	2014-07-30 17:48:58.000000000 +0400
+++ pyNFFT-1.3.2/pynfft/tests/test_nfft.py	2024-10-07 00:14:16.539829225 +0300
@@ -15,7 +15,8 @@
 # You should have received a copy of the GNU General Public License
 # along with this program. If not, see <http://www.gnu.org/licenses/>.
 
-from __future__ import division
+import pytest
+
 import numpy
 from numpy import pi
 from numpy.testing import assert_allclose
@@ -33,6 +34,7 @@
     f_dft = numpy.dot(F, f_hat.ravel())
     return f_dft
 
+
 def rdft(x, f, N):
     d = x.shape[-1]
     k = numpy.mgrid[[slice(-Nt/2, Nt/2) for Nt in N]]
@@ -40,24 +42,9 @@
     x = x.reshape([-1, d])
     F = numpy.exp(-2j * pi * numpy.dot(x, k))
     f_hat_dft = numpy.dot(numpy.conjugate(F).T, f)
-    f_hat = f_hat_dft.reshape(N)        
+    f_hat = f_hat_dft.reshape(N)
     return f_hat
 
-def check_forward_nfft(plan):
-    vrand_unit_complex(plan.f_hat.ravel())
-    assert_allclose(plan.trafo(), fdft(plan.x, plan.f_hat))
-
-def check_forward_ndft(plan):
-    vrand_unit_complex(plan.f_hat.ravel())
-    assert_allclose(plan.trafo(use_dft=True), fdft(plan.x, plan.f_hat))
-
-def check_adjoint_nfft(plan):
-    vrand_unit_complex(plan.f.ravel())
-    assert_allclose(plan.adjoint(), rdft(plan.x, plan.f, plan.N))
-
-def check_adjoint_ndft(plan):
-    vrand_unit_complex(plan.f.ravel())
-    assert_allclose(plan.adjoint(use_dft=True), rdft(plan.x, plan.f, plan.N))
 
 tested_nfft_args = (
     (8, 8, dict(m=6)),
@@ -75,31 +62,43 @@
     ((16, 16, 16), 16*16*16, dict()),
 )
 
-def test_forward_nfft():
-    for N, M, nfft_kwargs in tested_nfft_args:
-        plan = NFFT(N, M, **nfft_kwargs)
-        vrand_shifted_unit_double(plan.x.ravel())
-        plan.precompute()
-        yield check_forward_nfft, plan
-
-def test_forward_ndft():
-    for N, M, nfft_kwargs in tested_nfft_args:
-        plan = NFFT(N, M, **nfft_kwargs)
-        vrand_shifted_unit_double(plan.x.ravel())
-        plan.precompute()
-        yield check_forward_ndft, plan
-
-def test_adjoint_nfft():
-    for N, M, nfft_kwargs in tested_nfft_args:
-        plan = NFFT(N, M, **nfft_kwargs)
-        vrand_shifted_unit_double(plan.x.ravel())
-        plan.precompute()
-        yield check_adjoint_nfft, plan
-
-def test_adjoint_ndft():
-    for N, M, nfft_kwargs in tested_nfft_args:
-        plan = NFFT(N, M, **nfft_kwargs)
-        vrand_shifted_unit_double(plan.x.ravel())
-        plan.precompute()
-        yield check_adjoint_ndft, plan
 
+@pytest.mark.parametrize("N,M,nfft_kwargs", tested_nfft_args)
+def test_forward_nfft(N, M, nfft_kwargs):
+    plan = NFFT(N, M, **nfft_kwargs)
+    vrand_shifted_unit_double(plan.x.ravel())
+    plan.precompute()
+    # yield check_forward_nfft, plan
+
+    vrand_unit_complex(plan.f_hat.ravel())
+    assert_allclose(plan.trafo(), fdft(plan.x, plan.f_hat))
+
+
+@pytest.mark.parametrize("N,M,nfft_kwargs", tested_nfft_args)
+def test_forward_ndft(N, M, nfft_kwargs):
+    plan = NFFT(N, M, **nfft_kwargs)
+    vrand_shifted_unit_double(plan.x.ravel())
+    plan.precompute()
+    # yield check_forward_ndft, plan
+    vrand_unit_complex(plan.f_hat.ravel())
+    assert_allclose(plan.trafo(use_dft=True), fdft(plan.x, plan.f_hat))
+
+
+@pytest.mark.parametrize("N,M,nfft_kwargs", tested_nfft_args)
+def test_adjoint_nfft(N, M, nfft_kwargs):
+    plan = NFFT(N, M, **nfft_kwargs)
+    vrand_shifted_unit_double(plan.x.ravel())
+    plan.precompute()
+    # yield check_adjoint_nfft, plan
+    vrand_unit_complex(plan.f.ravel())
+    assert_allclose(plan.adjoint(), rdft(plan.x, plan.f, plan.N))
+
+
+@pytest.mark.parametrize("N,M,nfft_kwargs", tested_nfft_args)
+def test_adjoint_ndft(N, M, nfft_kwargs):
+    plan = NFFT(N, M, **nfft_kwargs)
+    vrand_shifted_unit_double(plan.x.ravel())
+    plan.precompute()
+    # yield check_adjoint_ndft, plan
+    vrand_unit_complex(plan.f.ravel())
+    assert_allclose(plan.adjoint(use_dft=True), rdft(plan.x, plan.f, plan.N))
